// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instances.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "instances.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace learnit {

namespace {

const ::google::protobuf::Descriptor* NameSpan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameSpan_reflection_ = NULL;
const ::google::protobuf::Descriptor* SentenceTheory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SentenceTheory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlotFiller_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlotFiller_reflection_ = NULL;
const ::google::protobuf::Descriptor* Arg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Prop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Prop_reflection_ = NULL;
const ::google::protobuf::Descriptor* PatternMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatternMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeedInstanceMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeedInstanceMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* TokenAlignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenAlignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* MentionAlignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MentionAlignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* SentenceAlignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SentenceAlignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sentence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sentence_reflection_ = NULL;
const ::google::protobuf::Descriptor* Instance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instance_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_instances_2eproto() {
  protobuf_AddDesc_instances_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "instances.proto");
  GOOGLE_CHECK(file != NULL);
  NameSpan_descriptor_ = file->message_type(0);
  static const int NameSpan_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpan, mentiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpan, entitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpan, entitysubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpan, allmentions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpan, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpan, end_),
  };
  NameSpan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameSpan_descriptor_,
      NameSpan::default_instance_,
      NameSpan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameSpan));
  SentenceTheory_descriptor_ = file->message_type(1);
  static const int SentenceTheory_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceTheory, docid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceTheory, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceTheory, sentindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceTheory, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceTheory, docevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceTheory, sentevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceTheory, namespan_),
  };
  SentenceTheory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SentenceTheory_descriptor_,
      SentenceTheory::default_instance_,
      SentenceTheory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceTheory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceTheory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SentenceTheory));
  BestName_descriptor_ = file->message_type(2);
  static const int BestName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestName, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestName, mentiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestName, text_),
  };
  BestName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestName_descriptor_,
      BestName::default_instance_,
      BestName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestName));
  Role_descriptor_ = file->message_type(3);
  static const int Role_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, value_),
  };
  Role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role_descriptor_,
      Role::default_instance_,
      Role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role));
  SlotFiller_descriptor_ = file->message_type(4);
  static const int SlotFiller_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, starttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, endtoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, headstarttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, headendtoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, mentiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, seedstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, bestname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, language_),
  };
  SlotFiller_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlotFiller_descriptor_,
      SlotFiller::default_instance_,
      SlotFiller_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotFiller, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlotFiller));
  Arg_descriptor_ = file->message_type(5);
  static const int Arg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, propchildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, lex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, slot_),
  };
  Arg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Arg_descriptor_,
      Arg::default_instance_,
      Arg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Arg));
  Prop_descriptor_ = file->message_type(6);
  static const int Prop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, predicate_),
  };
  Prop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Prop_descriptor_,
      Prop::default_instance_,
      Prop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Prop));
  PatternMatch_descriptor_ = file->message_type(7);
  static const int PatternMatch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternMatch, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternMatch, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternMatch, starttoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternMatch, endtoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternMatch, slot_),
  };
  PatternMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PatternMatch_descriptor_,
      PatternMatch::default_instance_,
      PatternMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatternMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PatternMatch));
  SeedInstanceMatch_descriptor_ = file->message_type(8);
  static const int SeedInstanceMatch_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInstanceMatch, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInstanceMatch, relationmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInstanceMatch, eventmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInstanceMatch, eventanchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInstanceMatch, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInstanceMatch, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInstanceMatch, prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInstanceMatch, type_),
  };
  SeedInstanceMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeedInstanceMatch_descriptor_,
      SeedInstanceMatch::default_instance_,
      SeedInstanceMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInstanceMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeedInstanceMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeedInstanceMatch));
  TokenAlignment_descriptor_ = file->message_type(9);
  static const int TokenAlignment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenAlignment, sourceindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenAlignment, targetindex_),
  };
  TokenAlignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenAlignment_descriptor_,
      TokenAlignment::default_instance_,
      TokenAlignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenAlignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenAlignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenAlignment));
  MentionAlignment_descriptor_ = file->message_type(10);
  static const int MentionAlignment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionAlignment, sourcemention_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionAlignment, targetmention_),
  };
  MentionAlignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MentionAlignment_descriptor_,
      MentionAlignment::default_instance_,
      MentionAlignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionAlignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionAlignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MentionAlignment));
  SentenceAlignment_descriptor_ = file->message_type(11);
  static const int SentenceAlignment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceAlignment, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceAlignment, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceAlignment, tokenalignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceAlignment, mentionalignment_),
  };
  SentenceAlignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SentenceAlignment_descriptor_,
      SentenceAlignment::default_instance_,
      SentenceAlignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceAlignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SentenceAlignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SentenceAlignment));
  Sentence_descriptor_ = file->message_type(12);
  static const int Sentence_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, sentencetheory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, sentencealignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, patternmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, seedinstancematch_),
  };
  Sentence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sentence_descriptor_,
      Sentence::default_instance_,
      Sentence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sentence));
  Instance_descriptor_ = file->message_type(13);
  static const int Instance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, sentence_),
  };
  Instance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instance_descriptor_,
      Instance::default_instance_,
      Instance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instance));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_instances_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameSpan_descriptor_, &NameSpan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SentenceTheory_descriptor_, &SentenceTheory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestName_descriptor_, &BestName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role_descriptor_, &Role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlotFiller_descriptor_, &SlotFiller::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Arg_descriptor_, &Arg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Prop_descriptor_, &Prop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PatternMatch_descriptor_, &PatternMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeedInstanceMatch_descriptor_, &SeedInstanceMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenAlignment_descriptor_, &TokenAlignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MentionAlignment_descriptor_, &MentionAlignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SentenceAlignment_descriptor_, &SentenceAlignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sentence_descriptor_, &Sentence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instance_descriptor_, &Instance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_instances_2eproto() {
  delete NameSpan::default_instance_;
  delete NameSpan_reflection_;
  delete SentenceTheory::default_instance_;
  delete SentenceTheory_reflection_;
  delete BestName::default_instance_;
  delete BestName_reflection_;
  delete Role::default_instance_;
  delete Role_reflection_;
  delete SlotFiller::default_instance_;
  delete SlotFiller_reflection_;
  delete Arg::default_instance_;
  delete Arg_reflection_;
  delete Prop::default_instance_;
  delete Prop_reflection_;
  delete PatternMatch::default_instance_;
  delete PatternMatch_reflection_;
  delete SeedInstanceMatch::default_instance_;
  delete SeedInstanceMatch_reflection_;
  delete SeedInstanceMatch::_default_type_;
  delete TokenAlignment::default_instance_;
  delete TokenAlignment_reflection_;
  delete MentionAlignment::default_instance_;
  delete MentionAlignment_reflection_;
  delete SentenceAlignment::default_instance_;
  delete SentenceAlignment_reflection_;
  delete Sentence::default_instance_;
  delete Sentence_reflection_;
  delete Instance::default_instance_;
  delete Instance_reflection_;
}

void protobuf_AddDesc_instances_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017instances.proto\022\007learnit\"{\n\010NameSpan\022\023"
    "\n\013mentionType\030\001 \001(\t\022\022\n\nentityType\030\002 \001(\t\022"
    "\025\n\rentitySubtype\030\003 \001(\t\022\023\n\013allMentions\030\004 "
    "\003(\t\022\r\n\005start\030\005 \001(\005\022\013\n\003end\030\006 \001(\005\"\235\001\n\016Sent"
    "enceTheory\022\r\n\005docid\030\001 \001(\t\022\020\n\010language\030\002 "
    "\001(\t\022\021\n\tsentIndex\030\003 \001(\005\022\r\n\005token\030\004 \003(\t\022\020\n"
    "\010docEvent\030\005 \003(\t\022\021\n\tsentEvent\030\006 \003(\t\022#\n\010na"
    "meSpan\030\007 \003(\0132\021.learnit.NameSpan\"A\n\010BestN"
    "ame\022\022\n\nconfidence\030\001 \001(\001\022\023\n\013mentionType\030\002"
    " \001(\t\022\014\n\004text\030\003 \001(\t\"#\n\004Role\022\014\n\004type\030\001 \001(\t"
    "\022\r\n\005value\030\002 \001(\t\"\207\002\n\nSlotFiller\022\014\n\004slot\030\001"
    " \001(\005\022\014\n\004type\030\002 \001(\t\022\022\n\nstartToken\030\003 \001(\005\022\020"
    "\n\010endToken\030\004 \001(\005\022\026\n\016headStartToken\030\005 \001(\005"
    "\022\024\n\014headEndToken\030\006 \001(\005\022\023\n\013mentionType\030\007 "
    "\001(\t\022\014\n\004text\030\010 \001(\t\022\022\n\nseedString\030\t \001(\t\022\033\n"
    "\004role\030\n \003(\0132\r.learnit.Role\022#\n\010bestName\030\013"
    " \001(\0132\021.learnit.BestName\022\020\n\010language\030\014 \001("
    "\t\"C\n\003Arg\022\023\n\013propChildId\030\001 \003(\005\022\014\n\004role\030\002 "
    "\001(\t\022\013\n\003lex\030\003 \001(\t\022\014\n\004slot\030\004 \003(\005\"B\n\004Prop\022\031"
    "\n\003arg\030\001 \003(\0132\014.learnit.Arg\022\014\n\004kind\030\002 \001(\t\022"
    "\021\n\tpredicate\030\003 \001(\t\"x\n\014PatternMatch\022\016\n\006ta"
    "rget\030\001 \001(\t\022\017\n\007pattern\030\002 \001(\t\022\022\n\nstartToke"
    "n\030\003 \001(\005\022\020\n\010endToken\030\004 \001(\005\022!\n\004slot\030\005 \003(\0132"
    "\023.learnit.SlotFiller\"\306\001\n\021SeedInstanceMat"
    "ch\022\016\n\006target\030\001 \001(\t\022\025\n\rrelationMatch\030\002 \003("
    "\t\022\022\n\neventMatch\030\003 \003(\t\022\023\n\013eventAnchor\030\004 \003"
    "(\t\022\r\n\005score\030\005 \001(\001\022!\n\004slot\030\006 \003(\0132\023.learni"
    "t.SlotFiller\022\033\n\004prop\030\007 \003(\0132\r.learnit.Pro"
    "p\022\022\n\004type\030\010 \001(\t:\004seed\":\n\016TokenAlignment\022"
    "\023\n\013sourceIndex\030\001 \001(\005\022\023\n\013targetIndex\030\002 \003("
    "\005\"f\n\020MentionAlignment\022(\n\rsourceMention\030\001"
    " \001(\0132\021.learnit.NameSpan\022(\n\rtargetMention"
    "\030\002 \001(\0132\021.learnit.NameSpan\"\231\001\n\021SentenceAl"
    "ignment\022\016\n\006source\030\003 \001(\t\022\016\n\006target\030\004 \001(\t\022"
    "/\n\016tokenAlignment\030\005 \003(\0132\027.learnit.TokenA"
    "lignment\0223\n\020mentionAlignment\030\006 \003(\0132\031.lea"
    "rnit.MentionAlignment\"\326\001\n\010Sentence\022/\n\016se"
    "ntenceTheory\030\001 \003(\0132\027.learnit.SentenceThe"
    "ory\0225\n\021sentenceAlignment\030\002 \003(\0132\032.learnit"
    ".SentenceAlignment\022+\n\014patternMatch\030\003 \003(\013"
    "2\025.learnit.PatternMatch\0225\n\021seedInstanceM"
    "atch\030\004 \003(\0132\032.learnit.SeedInstanceMatch\"/"
    "\n\010Instance\022#\n\010sentence\030\001 \003(\0132\021.learnit.S"
    "entence", 1727);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "instances.proto", &protobuf_RegisterTypes);
  NameSpan::default_instance_ = new NameSpan();
  SentenceTheory::default_instance_ = new SentenceTheory();
  BestName::default_instance_ = new BestName();
  Role::default_instance_ = new Role();
  SlotFiller::default_instance_ = new SlotFiller();
  Arg::default_instance_ = new Arg();
  Prop::default_instance_ = new Prop();
  PatternMatch::default_instance_ = new PatternMatch();
  SeedInstanceMatch::_default_type_ =
      new ::std::string("seed", 4);
  SeedInstanceMatch::default_instance_ = new SeedInstanceMatch();
  TokenAlignment::default_instance_ = new TokenAlignment();
  MentionAlignment::default_instance_ = new MentionAlignment();
  SentenceAlignment::default_instance_ = new SentenceAlignment();
  Sentence::default_instance_ = new Sentence();
  Instance::default_instance_ = new Instance();
  NameSpan::default_instance_->InitAsDefaultInstance();
  SentenceTheory::default_instance_->InitAsDefaultInstance();
  BestName::default_instance_->InitAsDefaultInstance();
  Role::default_instance_->InitAsDefaultInstance();
  SlotFiller::default_instance_->InitAsDefaultInstance();
  Arg::default_instance_->InitAsDefaultInstance();
  Prop::default_instance_->InitAsDefaultInstance();
  PatternMatch::default_instance_->InitAsDefaultInstance();
  SeedInstanceMatch::default_instance_->InitAsDefaultInstance();
  TokenAlignment::default_instance_->InitAsDefaultInstance();
  MentionAlignment::default_instance_->InitAsDefaultInstance();
  SentenceAlignment::default_instance_->InitAsDefaultInstance();
  Sentence::default_instance_->InitAsDefaultInstance();
  Instance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_instances_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_instances_2eproto {
  StaticDescriptorInitializer_instances_2eproto() {
    protobuf_AddDesc_instances_2eproto();
  }
} static_descriptor_initializer_instances_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NameSpan::kMentionTypeFieldNumber;
const int NameSpan::kEntityTypeFieldNumber;
const int NameSpan::kEntitySubtypeFieldNumber;
const int NameSpan::kAllMentionsFieldNumber;
const int NameSpan::kStartFieldNumber;
const int NameSpan::kEndFieldNumber;
#endif  // !_MSC_VER

NameSpan::NameSpan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameSpan::InitAsDefaultInstance() {
}

NameSpan::NameSpan(const NameSpan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameSpan::SharedCtor() {
  _cached_size_ = 0;
  mentiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entitytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entitysubtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameSpan::~NameSpan() {
  SharedDtor();
}

void NameSpan::SharedDtor() {
  if (mentiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete mentiontype_;
  }
  if (entitytype_ != &::google::protobuf::internal::kEmptyString) {
    delete entitytype_;
  }
  if (entitysubtype_ != &::google::protobuf::internal::kEmptyString) {
    delete entitysubtype_;
  }
  if (this != default_instance_) {
  }
}

void NameSpan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameSpan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameSpan_descriptor_;
}

const NameSpan& NameSpan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

NameSpan* NameSpan::default_instance_ = NULL;

NameSpan* NameSpan::New() const {
  return new NameSpan;
}

void NameSpan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mentiontype()) {
      if (mentiontype_ != &::google::protobuf::internal::kEmptyString) {
        mentiontype_->clear();
      }
    }
    if (has_entitytype()) {
      if (entitytype_ != &::google::protobuf::internal::kEmptyString) {
        entitytype_->clear();
      }
    }
    if (has_entitysubtype()) {
      if (entitysubtype_ != &::google::protobuf::internal::kEmptyString) {
        entitysubtype_->clear();
      }
    }
    start_ = 0;
    end_ = 0;
  }
  allmentions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mentionType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mentiontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mentiontype().data(), this->mentiontype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entityType;
        break;
      }

      // optional string entityType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entityType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entitytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entitytype().data(), this->entitytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entitySubtype;
        break;
      }

      // optional string entitySubtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entitySubtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entitysubtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entitysubtype().data(), this->entitysubtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_allMentions;
        break;
      }

      // repeated string allMentions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allMentions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_allmentions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->allmentions(this->allmentions_size() - 1).data(),
            this->allmentions(this->allmentions_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_allMentions;
        if (input->ExpectTag(40)) goto parse_start;
        break;
      }

      // optional int32 start = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end;
        break;
      }

      // optional int32 end = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string mentionType = 1;
  if (has_mentiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mentiontype().data(), this->mentiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mentiontype(), output);
  }

  // optional string entityType = 2;
  if (has_entitytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entitytype().data(), this->entitytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->entitytype(), output);
  }

  // optional string entitySubtype = 3;
  if (has_entitysubtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entitysubtype().data(), this->entitysubtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->entitysubtype(), output);
  }

  // repeated string allMentions = 4;
  for (int i = 0; i < this->allmentions_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->allmentions(i).data(), this->allmentions(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->allmentions(i), output);
  }

  // optional int32 start = 5;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->start(), output);
  }

  // optional int32 end = 6;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameSpan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string mentionType = 1;
  if (has_mentiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mentiontype().data(), this->mentiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mentiontype(), target);
  }

  // optional string entityType = 2;
  if (has_entitytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entitytype().data(), this->entitytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entitytype(), target);
  }

  // optional string entitySubtype = 3;
  if (has_entitysubtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entitysubtype().data(), this->entitysubtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->entitysubtype(), target);
  }

  // repeated string allMentions = 4;
  for (int i = 0; i < this->allmentions_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->allmentions(i).data(), this->allmentions(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->allmentions(i), target);
  }

  // optional int32 start = 5;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->start(), target);
  }

  // optional int32 end = 6;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameSpan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mentionType = 1;
    if (has_mentiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mentiontype());
    }

    // optional string entityType = 2;
    if (has_entitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entitytype());
    }

    // optional string entitySubtype = 3;
    if (has_entitysubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entitysubtype());
    }

    // optional int32 start = 5;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 end = 6;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

  }
  // repeated string allMentions = 4;
  total_size += 1 * this->allmentions_size();
  for (int i = 0; i < this->allmentions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->allmentions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameSpan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameSpan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameSpan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameSpan::MergeFrom(const NameSpan& from) {
  GOOGLE_CHECK_NE(&from, this);
  allmentions_.MergeFrom(from.allmentions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mentiontype()) {
      set_mentiontype(from.mentiontype());
    }
    if (from.has_entitytype()) {
      set_entitytype(from.entitytype());
    }
    if (from.has_entitysubtype()) {
      set_entitysubtype(from.entitysubtype());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameSpan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameSpan::CopyFrom(const NameSpan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameSpan::IsInitialized() const {

  return true;
}

void NameSpan::Swap(NameSpan* other) {
  if (other != this) {
    std::swap(mentiontype_, other->mentiontype_);
    std::swap(entitytype_, other->entitytype_);
    std::swap(entitysubtype_, other->entitysubtype_);
    allmentions_.Swap(&other->allmentions_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameSpan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameSpan_descriptor_;
  metadata.reflection = NameSpan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SentenceTheory::kDocidFieldNumber;
const int SentenceTheory::kLanguageFieldNumber;
const int SentenceTheory::kSentIndexFieldNumber;
const int SentenceTheory::kTokenFieldNumber;
const int SentenceTheory::kDocEventFieldNumber;
const int SentenceTheory::kSentEventFieldNumber;
const int SentenceTheory::kNameSpanFieldNumber;
#endif  // !_MSC_VER

SentenceTheory::SentenceTheory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SentenceTheory::InitAsDefaultInstance() {
}

SentenceTheory::SentenceTheory(const SentenceTheory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SentenceTheory::SharedCtor() {
  _cached_size_ = 0;
  docid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sentindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SentenceTheory::~SentenceTheory() {
  SharedDtor();
}

void SentenceTheory::SharedDtor() {
  if (docid_ != &::google::protobuf::internal::kEmptyString) {
    delete docid_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (this != default_instance_) {
  }
}

void SentenceTheory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SentenceTheory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SentenceTheory_descriptor_;
}

const SentenceTheory& SentenceTheory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

SentenceTheory* SentenceTheory::default_instance_ = NULL;

SentenceTheory* SentenceTheory::New() const {
  return new SentenceTheory;
}

void SentenceTheory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_docid()) {
      if (docid_ != &::google::protobuf::internal::kEmptyString) {
        docid_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    sentindex_ = 0;
  }
  token_.Clear();
  docevent_.Clear();
  sentevent_.Clear();
  namespan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SentenceTheory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string docid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->docid().data(), this->docid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_language;
        break;
      }

      // optional string language = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sentIndex;
        break;
      }

      // optional int32 sentIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sentIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sentindex_)));
          set_has_sentindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // repeated string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        if (input->ExpectTag(42)) goto parse_docEvent;
        break;
      }

      // repeated string docEvent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_docEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_docevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->docevent(this->docevent_size() - 1).data(),
            this->docevent(this->docevent_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_docEvent;
        if (input->ExpectTag(50)) goto parse_sentEvent;
        break;
      }

      // repeated string sentEvent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sentEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sentevent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sentevent(this->sentevent_size() - 1).data(),
            this->sentevent(this->sentevent_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sentEvent;
        if (input->ExpectTag(58)) goto parse_nameSpan;
        break;
      }

      // repeated .learnit.NameSpan nameSpan = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameSpan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_namespan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nameSpan;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SentenceTheory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string docid = 1;
  if (has_docid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->docid().data(), this->docid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->docid(), output);
  }

  // optional string language = 2;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->language(), output);
  }

  // optional int32 sentIndex = 3;
  if (has_sentindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sentindex(), output);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->token(i).data(), this->token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(i), output);
  }

  // repeated string docEvent = 5;
  for (int i = 0; i < this->docevent_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->docevent(i).data(), this->docevent(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->docevent(i), output);
  }

  // repeated string sentEvent = 6;
  for (int i = 0; i < this->sentevent_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->sentevent(i).data(), this->sentevent(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sentevent(i), output);
  }

  // repeated .learnit.NameSpan nameSpan = 7;
  for (int i = 0; i < this->namespan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->namespan(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SentenceTheory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string docid = 1;
  if (has_docid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->docid().data(), this->docid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->docid(), target);
  }

  // optional string language = 2;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }

  // optional int32 sentIndex = 3;
  if (has_sentindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sentindex(), target);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->token(i), target);
  }

  // repeated string docEvent = 5;
  for (int i = 0; i < this->docevent_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->docevent(i).data(), this->docevent(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->docevent(i), target);
  }

  // repeated string sentEvent = 6;
  for (int i = 0; i < this->sentevent_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sentevent(i).data(), this->sentevent(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->sentevent(i), target);
  }

  // repeated .learnit.NameSpan nameSpan = 7;
  for (int i = 0; i < this->namespan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->namespan(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SentenceTheory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string docid = 1;
    if (has_docid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docid());
    }

    // optional string language = 2;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional int32 sentIndex = 3;
    if (has_sentindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sentindex());
    }

  }
  // repeated string token = 4;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated string docEvent = 5;
  total_size += 1 * this->docevent_size();
  for (int i = 0; i < this->docevent_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->docevent(i));
  }

  // repeated string sentEvent = 6;
  total_size += 1 * this->sentevent_size();
  for (int i = 0; i < this->sentevent_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sentevent(i));
  }

  // repeated .learnit.NameSpan nameSpan = 7;
  total_size += 1 * this->namespan_size();
  for (int i = 0; i < this->namespan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->namespan(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SentenceTheory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SentenceTheory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SentenceTheory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SentenceTheory::MergeFrom(const SentenceTheory& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_.MergeFrom(from.token_);
  docevent_.MergeFrom(from.docevent_);
  sentevent_.MergeFrom(from.sentevent_);
  namespan_.MergeFrom(from.namespan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_docid()) {
      set_docid(from.docid());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_sentindex()) {
      set_sentindex(from.sentindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SentenceTheory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SentenceTheory::CopyFrom(const SentenceTheory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentenceTheory::IsInitialized() const {

  return true;
}

void SentenceTheory::Swap(SentenceTheory* other) {
  if (other != this) {
    std::swap(docid_, other->docid_);
    std::swap(language_, other->language_);
    std::swap(sentindex_, other->sentindex_);
    token_.Swap(&other->token_);
    docevent_.Swap(&other->docevent_);
    sentevent_.Swap(&other->sentevent_);
    namespan_.Swap(&other->namespan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SentenceTheory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SentenceTheory_descriptor_;
  metadata.reflection = SentenceTheory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestName::kConfidenceFieldNumber;
const int BestName::kMentionTypeFieldNumber;
const int BestName::kTextFieldNumber;
#endif  // !_MSC_VER

BestName::BestName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestName::InitAsDefaultInstance() {
}

BestName::BestName(const BestName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestName::SharedCtor() {
  _cached_size_ = 0;
  confidence_ = 0;
  mentiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestName::~BestName() {
  SharedDtor();
}

void BestName::SharedDtor() {
  if (mentiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete mentiontype_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void BestName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestName_descriptor_;
}

const BestName& BestName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

BestName* BestName::default_instance_ = NULL;

BestName* BestName::New() const {
  return new BestName;
}

void BestName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    confidence_ = 0;
    if (has_mentiontype()) {
      if (mentiontype_ != &::google::protobuf::internal::kEmptyString) {
        mentiontype_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double confidence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mentionType;
        break;
      }

      // optional string mentionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mentionType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mentiontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mentiontype().data(), this->mentiontype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double confidence = 1;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->confidence(), output);
  }

  // optional string mentionType = 2;
  if (has_mentiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mentiontype().data(), this->mentiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mentiontype(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double confidence = 1;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->confidence(), target);
  }

  // optional string mentionType = 2;
  if (has_mentiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mentiontype().data(), this->mentiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mentiontype(), target);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double confidence = 1;
    if (has_confidence()) {
      total_size += 1 + 8;
    }

    // optional string mentionType = 2;
    if (has_mentiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mentiontype());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestName::MergeFrom(const BestName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_mentiontype()) {
      set_mentiontype(from.mentiontype());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestName::CopyFrom(const BestName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestName::IsInitialized() const {

  return true;
}

void BestName::Swap(BestName* other) {
  if (other != this) {
    std::swap(confidence_, other->confidence_);
    std::swap(mentiontype_, other->mentiontype_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestName_descriptor_;
  metadata.reflection = BestName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Role::kTypeFieldNumber;
const int Role::kValueFieldNumber;
#endif  // !_MSC_VER

Role::Role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Role::InitAsDefaultInstance() {
}

Role::Role(const Role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Role::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role::~Role() {
  SharedDtor();
}

void Role::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}

const Role& Role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

Role* Role::default_instance_ = NULL;

Role* Role::New() const {
  return new Role;
}

void Role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {

  return true;
}

void Role::Swap(Role* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_descriptor_;
  metadata.reflection = Role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlotFiller::kSlotFieldNumber;
const int SlotFiller::kTypeFieldNumber;
const int SlotFiller::kStartTokenFieldNumber;
const int SlotFiller::kEndTokenFieldNumber;
const int SlotFiller::kHeadStartTokenFieldNumber;
const int SlotFiller::kHeadEndTokenFieldNumber;
const int SlotFiller::kMentionTypeFieldNumber;
const int SlotFiller::kTextFieldNumber;
const int SlotFiller::kSeedStringFieldNumber;
const int SlotFiller::kRoleFieldNumber;
const int SlotFiller::kBestNameFieldNumber;
const int SlotFiller::kLanguageFieldNumber;
#endif  // !_MSC_VER

SlotFiller::SlotFiller()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlotFiller::InitAsDefaultInstance() {
  bestname_ = const_cast< ::learnit::BestName*>(&::learnit::BestName::default_instance());
}

SlotFiller::SlotFiller(const SlotFiller& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlotFiller::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttoken_ = 0;
  endtoken_ = 0;
  headstarttoken_ = 0;
  headendtoken_ = 0;
  mentiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seedstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bestname_ = NULL;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlotFiller::~SlotFiller() {
  SharedDtor();
}

void SlotFiller::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (mentiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete mentiontype_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (seedstring_ != &::google::protobuf::internal::kEmptyString) {
    delete seedstring_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (this != default_instance_) {
    delete bestname_;
  }
}

void SlotFiller::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlotFiller::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlotFiller_descriptor_;
}

const SlotFiller& SlotFiller::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

SlotFiller* SlotFiller::default_instance_ = NULL;

SlotFiller* SlotFiller::New() const {
  return new SlotFiller;
}

void SlotFiller::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    starttoken_ = 0;
    endtoken_ = 0;
    headstarttoken_ = 0;
    headendtoken_ = 0;
    if (has_mentiontype()) {
      if (mentiontype_ != &::google::protobuf::internal::kEmptyString) {
        mentiontype_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_seedstring()) {
      if (seedstring_ != &::google::protobuf::internal::kEmptyString) {
        seedstring_->clear();
      }
    }
    if (has_bestname()) {
      if (bestname_ != NULL) bestname_->::learnit::BestName::Clear();
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
  }
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlotFiller::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startToken;
        break;
      }

      // optional int32 startToken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttoken_)));
          set_has_starttoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endToken;
        break;
      }

      // optional int32 endToken = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtoken_)));
          set_has_endtoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_headStartToken;
        break;
      }

      // optional int32 headStartToken = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headStartToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headstarttoken_)));
          set_has_headstarttoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_headEndToken;
        break;
      }

      // optional int32 headEndToken = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headEndToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headendtoken_)));
          set_has_headendtoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mentionType;
        break;
      }

      // optional string mentionType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mentionType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mentiontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mentiontype().data(), this->mentiontype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_text;
        break;
      }

      // optional string text = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_seedString;
        break;
      }

      // optional string seedString = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seedString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seedstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seedstring().data(), this->seedstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_role;
        break;
      }

      // repeated .learnit.Role role = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_role;
        if (input->ExpectTag(90)) goto parse_bestName;
        break;
      }

      // optional .learnit.BestName bestName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bestName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bestname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_language;
        break;
      }

      // optional string language = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlotFiller::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional int32 startToken = 3;
  if (has_starttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starttoken(), output);
  }

  // optional int32 endToken = 4;
  if (has_endtoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endtoken(), output);
  }

  // optional int32 headStartToken = 5;
  if (has_headstarttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->headstarttoken(), output);
  }

  // optional int32 headEndToken = 6;
  if (has_headendtoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->headendtoken(), output);
  }

  // optional string mentionType = 7;
  if (has_mentiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mentiontype().data(), this->mentiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->mentiontype(), output);
  }

  // optional string text = 8;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->text(), output);
  }

  // optional string seedString = 9;
  if (has_seedstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seedstring().data(), this->seedstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->seedstring(), output);
  }

  // repeated .learnit.Role role = 10;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->role(i), output);
  }

  // optional .learnit.BestName bestName = 11;
  if (has_bestname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->bestname(), output);
  }

  // optional string language = 12;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->language(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlotFiller::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int32 startToken = 3;
  if (has_starttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starttoken(), target);
  }

  // optional int32 endToken = 4;
  if (has_endtoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endtoken(), target);
  }

  // optional int32 headStartToken = 5;
  if (has_headstarttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->headstarttoken(), target);
  }

  // optional int32 headEndToken = 6;
  if (has_headendtoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->headendtoken(), target);
  }

  // optional string mentionType = 7;
  if (has_mentiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mentiontype().data(), this->mentiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mentiontype(), target);
  }

  // optional string text = 8;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->text(), target);
  }

  // optional string seedString = 9;
  if (has_seedstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seedstring().data(), this->seedstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->seedstring(), target);
  }

  // repeated .learnit.Role role = 10;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->role(i), target);
  }

  // optional .learnit.BestName bestName = 11;
  if (has_bestname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->bestname(), target);
  }

  // optional string language = 12;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->language(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlotFiller::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 startToken = 3;
    if (has_starttoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttoken());
    }

    // optional int32 endToken = 4;
    if (has_endtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtoken());
    }

    // optional int32 headStartToken = 5;
    if (has_headstarttoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headstarttoken());
    }

    // optional int32 headEndToken = 6;
    if (has_headendtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headendtoken());
    }

    // optional string mentionType = 7;
    if (has_mentiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mentiontype());
    }

    // optional string text = 8;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string seedString = 9;
    if (has_seedstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seedstring());
    }

    // optional .learnit.BestName bestName = 11;
    if (has_bestname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bestname());
    }

    // optional string language = 12;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  // repeated .learnit.Role role = 10;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlotFiller::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlotFiller* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlotFiller*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlotFiller::MergeFrom(const SlotFiller& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_starttoken()) {
      set_starttoken(from.starttoken());
    }
    if (from.has_endtoken()) {
      set_endtoken(from.endtoken());
    }
    if (from.has_headstarttoken()) {
      set_headstarttoken(from.headstarttoken());
    }
    if (from.has_headendtoken()) {
      set_headendtoken(from.headendtoken());
    }
    if (from.has_mentiontype()) {
      set_mentiontype(from.mentiontype());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seedstring()) {
      set_seedstring(from.seedstring());
    }
    if (from.has_bestname()) {
      mutable_bestname()->::learnit::BestName::MergeFrom(from.bestname());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlotFiller::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlotFiller::CopyFrom(const SlotFiller& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlotFiller::IsInitialized() const {

  return true;
}

void SlotFiller::Swap(SlotFiller* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(type_, other->type_);
    std::swap(starttoken_, other->starttoken_);
    std::swap(endtoken_, other->endtoken_);
    std::swap(headstarttoken_, other->headstarttoken_);
    std::swap(headendtoken_, other->headendtoken_);
    std::swap(mentiontype_, other->mentiontype_);
    std::swap(text_, other->text_);
    std::swap(seedstring_, other->seedstring_);
    role_.Swap(&other->role_);
    std::swap(bestname_, other->bestname_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlotFiller::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlotFiller_descriptor_;
  metadata.reflection = SlotFiller_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Arg::kPropChildIdFieldNumber;
const int Arg::kRoleFieldNumber;
const int Arg::kLexFieldNumber;
const int Arg::kSlotFieldNumber;
#endif  // !_MSC_VER

Arg::Arg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Arg::InitAsDefaultInstance() {
}

Arg::Arg(const Arg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Arg::SharedCtor() {
  _cached_size_ = 0;
  role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arg::~Arg() {
  SharedDtor();
}

void Arg::SharedDtor() {
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (lex_ != &::google::protobuf::internal::kEmptyString) {
    delete lex_;
  }
  if (this != default_instance_) {
  }
}

void Arg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arg_descriptor_;
}

const Arg& Arg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

Arg* Arg::default_instance_ = NULL;

Arg* Arg::New() const {
  return new Arg;
}

void Arg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_role()) {
      if (role_ != &::google::protobuf::internal::kEmptyString) {
        role_->clear();
      }
    }
    if (has_lex()) {
      if (lex_ != &::google::protobuf::internal::kEmptyString) {
        lex_->clear();
      }
    }
  }
  propchildid_.Clear();
  slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Arg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 propChildId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propChildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_propchildid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_propchildid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_propChildId;
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }

      // optional string role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lex;
        break;
      }

      // optional string lex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lex().data(), this->lex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot;
        break;
      }

      // repeated int32 slot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_slot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_slot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Arg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 propChildId = 1;
  for (int i = 0; i < this->propchildid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->propchildid(i), output);
  }

  // optional string role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role(), output);
  }

  // optional string lex = 3;
  if (has_lex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lex().data(), this->lex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lex(), output);
  }

  // repeated int32 slot = 4;
  for (int i = 0; i < this->slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->slot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Arg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 propChildId = 1;
  for (int i = 0; i < this->propchildid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->propchildid(i), target);
  }

  // optional string role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role(), target);
  }

  // optional string lex = 3;
  if (has_lex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lex().data(), this->lex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lex(), target);
  }

  // repeated int32 slot = 4;
  for (int i = 0; i < this->slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->slot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Arg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }

    // optional string lex = 3;
    if (has_lex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lex());
    }

  }
  // repeated int32 propChildId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->propchildid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->propchildid(i));
    }
    total_size += 1 * this->propchildid_size() + data_size;
  }

  // repeated int32 slot = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->slot_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->slot(i));
    }
    total_size += 1 * this->slot_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Arg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Arg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Arg::MergeFrom(const Arg& from) {
  GOOGLE_CHECK_NE(&from, this);
  propchildid_.MergeFrom(from.propchildid_);
  slot_.MergeFrom(from.slot_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_lex()) {
      set_lex(from.lex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Arg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arg::CopyFrom(const Arg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arg::IsInitialized() const {

  return true;
}

void Arg::Swap(Arg* other) {
  if (other != this) {
    propchildid_.Swap(&other->propchildid_);
    std::swap(role_, other->role_);
    std::swap(lex_, other->lex_);
    slot_.Swap(&other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Arg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arg_descriptor_;
  metadata.reflection = Arg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Prop::kArgFieldNumber;
const int Prop::kKindFieldNumber;
const int Prop::kPredicateFieldNumber;
#endif  // !_MSC_VER

Prop::Prop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Prop::InitAsDefaultInstance() {
}

Prop::Prop(const Prop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Prop::SharedCtor() {
  _cached_size_ = 0;
  kind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  predicate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Prop::~Prop() {
  SharedDtor();
}

void Prop::SharedDtor() {
  if (kind_ != &::google::protobuf::internal::kEmptyString) {
    delete kind_;
  }
  if (predicate_ != &::google::protobuf::internal::kEmptyString) {
    delete predicate_;
  }
  if (this != default_instance_) {
  }
}

void Prop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Prop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Prop_descriptor_;
}

const Prop& Prop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

Prop* Prop::default_instance_ = NULL;

Prop* Prop::New() const {
  return new Prop;
}

void Prop::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_kind()) {
      if (kind_ != &::google::protobuf::internal::kEmptyString) {
        kind_->clear();
      }
    }
    if (has_predicate()) {
      if (predicate_ != &::google::protobuf::internal::kEmptyString) {
        predicate_->clear();
      }
    }
  }
  arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Prop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .learnit.Arg arg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arg;
        if (input->ExpectTag(18)) goto parse_kind;
        break;
      }

      // optional string kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kind().data(), this->kind().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_predicate;
        break;
      }

      // optional string predicate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_predicate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predicate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->predicate().data(), this->predicate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Prop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .learnit.Arg arg = 1;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arg(i), output);
  }

  // optional string kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kind().data(), this->kind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->kind(), output);
  }

  // optional string predicate = 3;
  if (has_predicate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predicate().data(), this->predicate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->predicate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Prop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .learnit.Arg arg = 1;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arg(i), target);
  }

  // optional string kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kind().data(), this->kind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kind(), target);
  }

  // optional string predicate = 3;
  if (has_predicate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predicate().data(), this->predicate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->predicate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Prop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kind());
    }

    // optional string predicate = 3;
    if (has_predicate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predicate());
    }

  }
  // repeated .learnit.Arg arg = 1;
  total_size += 1 * this->arg_size();
  for (int i = 0; i < this->arg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Prop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Prop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Prop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Prop::MergeFrom(const Prop& from) {
  GOOGLE_CHECK_NE(&from, this);
  arg_.MergeFrom(from.arg_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_predicate()) {
      set_predicate(from.predicate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Prop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prop::CopyFrom(const Prop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prop::IsInitialized() const {

  return true;
}

void Prop::Swap(Prop* other) {
  if (other != this) {
    arg_.Swap(&other->arg_);
    std::swap(kind_, other->kind_);
    std::swap(predicate_, other->predicate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Prop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Prop_descriptor_;
  metadata.reflection = Prop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PatternMatch::kTargetFieldNumber;
const int PatternMatch::kPatternFieldNumber;
const int PatternMatch::kStartTokenFieldNumber;
const int PatternMatch::kEndTokenFieldNumber;
const int PatternMatch::kSlotFieldNumber;
#endif  // !_MSC_VER

PatternMatch::PatternMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PatternMatch::InitAsDefaultInstance() {
}

PatternMatch::PatternMatch(const PatternMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PatternMatch::SharedCtor() {
  _cached_size_ = 0;
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttoken_ = 0;
  endtoken_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PatternMatch::~PatternMatch() {
  SharedDtor();
}

void PatternMatch::SharedDtor() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete pattern_;
  }
  if (this != default_instance_) {
  }
}

void PatternMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatternMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatternMatch_descriptor_;
}

const PatternMatch& PatternMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

PatternMatch* PatternMatch::default_instance_ = NULL;

PatternMatch* PatternMatch::New() const {
  return new PatternMatch;
}

void PatternMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::kEmptyString) {
        pattern_->clear();
      }
    }
    starttoken_ = 0;
    endtoken_ = 0;
  }
  slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PatternMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pattern;
        break;
      }

      // optional string pattern = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startToken;
        break;
      }

      // optional int32 startToken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttoken_)));
          set_has_starttoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endToken;
        break;
      }

      // optional int32 endToken = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endToken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtoken_)));
          set_has_endtoken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_slot;
        break;
      }

      // repeated .learnit.SlotFiller slot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_slot;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PatternMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->target(), output);
  }

  // optional string pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pattern(), output);
  }

  // optional int32 startToken = 3;
  if (has_starttoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starttoken(), output);
  }

  // optional int32 endToken = 4;
  if (has_endtoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endtoken(), output);
  }

  // repeated .learnit.SlotFiller slot = 5;
  for (int i = 0; i < this->slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->slot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PatternMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target(), target);
  }

  // optional string pattern = 2;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pattern(), target);
  }

  // optional int32 startToken = 3;
  if (has_starttoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starttoken(), target);
  }

  // optional int32 endToken = 4;
  if (has_endtoken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endtoken(), target);
  }

  // repeated .learnit.SlotFiller slot = 5;
  for (int i = 0; i < this->slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->slot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PatternMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // optional string pattern = 2;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional int32 startToken = 3;
    if (has_starttoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttoken());
    }

    // optional int32 endToken = 4;
    if (has_endtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtoken());
    }

  }
  // repeated .learnit.SlotFiller slot = 5;
  total_size += 1 * this->slot_size();
  for (int i = 0; i < this->slot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatternMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PatternMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PatternMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PatternMatch::MergeFrom(const PatternMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  slot_.MergeFrom(from.slot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_starttoken()) {
      set_starttoken(from.starttoken());
    }
    if (from.has_endtoken()) {
      set_endtoken(from.endtoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PatternMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatternMatch::CopyFrom(const PatternMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatternMatch::IsInitialized() const {

  return true;
}

void PatternMatch::Swap(PatternMatch* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(pattern_, other->pattern_);
    std::swap(starttoken_, other->starttoken_);
    std::swap(endtoken_, other->endtoken_);
    slot_.Swap(&other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PatternMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatternMatch_descriptor_;
  metadata.reflection = PatternMatch_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SeedInstanceMatch::_default_type_ = NULL;
#ifndef _MSC_VER
const int SeedInstanceMatch::kTargetFieldNumber;
const int SeedInstanceMatch::kRelationMatchFieldNumber;
const int SeedInstanceMatch::kEventMatchFieldNumber;
const int SeedInstanceMatch::kEventAnchorFieldNumber;
const int SeedInstanceMatch::kScoreFieldNumber;
const int SeedInstanceMatch::kSlotFieldNumber;
const int SeedInstanceMatch::kPropFieldNumber;
const int SeedInstanceMatch::kTypeFieldNumber;
#endif  // !_MSC_VER

SeedInstanceMatch::SeedInstanceMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SeedInstanceMatch::InitAsDefaultInstance() {
}

SeedInstanceMatch::SeedInstanceMatch(const SeedInstanceMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeedInstanceMatch::SharedCtor() {
  _cached_size_ = 0;
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  type_ = const_cast< ::std::string*>(_default_type_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeedInstanceMatch::~SeedInstanceMatch() {
  SharedDtor();
}

void SeedInstanceMatch::SharedDtor() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (type_ != _default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void SeedInstanceMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeedInstanceMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeedInstanceMatch_descriptor_;
}

const SeedInstanceMatch& SeedInstanceMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

SeedInstanceMatch* SeedInstanceMatch::default_instance_ = NULL;

SeedInstanceMatch* SeedInstanceMatch::New() const {
  return new SeedInstanceMatch;
}

void SeedInstanceMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
    score_ = 0;
    if (has_type()) {
      if (type_ != _default_type_) {
        type_->assign(*_default_type_);
      }
    }
  }
  relationmatch_.Clear();
  eventmatch_.Clear();
  eventanchor_.Clear();
  slot_.Clear();
  prop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeedInstanceMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relationMatch;
        break;
      }

      // repeated string relationMatch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relationMatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_relationmatch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relationmatch(this->relationmatch_size() - 1).data(),
            this->relationmatch(this->relationmatch_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_relationMatch;
        if (input->ExpectTag(26)) goto parse_eventMatch;
        break;
      }

      // repeated string eventMatch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventMatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_eventmatch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventmatch(this->eventmatch_size() - 1).data(),
            this->eventmatch(this->eventmatch_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eventMatch;
        if (input->ExpectTag(34)) goto parse_eventAnchor;
        break;
      }

      // repeated string eventAnchor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventAnchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_eventanchor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventanchor(this->eventanchor_size() - 1).data(),
            this->eventanchor(this->eventanchor_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eventAnchor;
        if (input->ExpectTag(41)) goto parse_score;
        break;
      }

      // optional double score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_slot;
        break;
      }

      // repeated .learnit.SlotFiller slot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_slot;
        if (input->ExpectTag(58)) goto parse_prop;
        break;
      }

      // repeated .learnit.Prop prop = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_prop;
        if (input->ExpectTag(66)) goto parse_type;
        break;
      }

      // optional string type = 8 [default = "seed"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeedInstanceMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->target(), output);
  }

  // repeated string relationMatch = 2;
  for (int i = 0; i < this->relationmatch_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->relationmatch(i).data(), this->relationmatch(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->relationmatch(i), output);
  }

  // repeated string eventMatch = 3;
  for (int i = 0; i < this->eventmatch_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->eventmatch(i).data(), this->eventmatch(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->eventmatch(i), output);
  }

  // repeated string eventAnchor = 4;
  for (int i = 0; i < this->eventanchor_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->eventanchor(i).data(), this->eventanchor(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->eventanchor(i), output);
  }

  // optional double score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->score(), output);
  }

  // repeated .learnit.SlotFiller slot = 6;
  for (int i = 0; i < this->slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->slot(i), output);
  }

  // repeated .learnit.Prop prop = 7;
  for (int i = 0; i < this->prop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->prop(i), output);
  }

  // optional string type = 8 [default = "seed"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeedInstanceMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target(), target);
  }

  // repeated string relationMatch = 2;
  for (int i = 0; i < this->relationmatch_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relationmatch(i).data(), this->relationmatch(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->relationmatch(i), target);
  }

  // repeated string eventMatch = 3;
  for (int i = 0; i < this->eventmatch_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventmatch(i).data(), this->eventmatch(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->eventmatch(i), target);
  }

  // repeated string eventAnchor = 4;
  for (int i = 0; i < this->eventanchor_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventanchor(i).data(), this->eventanchor(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->eventanchor(i), target);
  }

  // optional double score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->score(), target);
  }

  // repeated .learnit.SlotFiller slot = 6;
  for (int i = 0; i < this->slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->slot(i), target);
  }

  // repeated .learnit.Prop prop = 7;
  for (int i = 0; i < this->prop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->prop(i), target);
  }

  // optional string type = 8 [default = "seed"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeedInstanceMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // optional double score = 5;
    if (has_score()) {
      total_size += 1 + 8;
    }

    // optional string type = 8 [default = "seed"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  // repeated string relationMatch = 2;
  total_size += 1 * this->relationmatch_size();
  for (int i = 0; i < this->relationmatch_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->relationmatch(i));
  }

  // repeated string eventMatch = 3;
  total_size += 1 * this->eventmatch_size();
  for (int i = 0; i < this->eventmatch_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->eventmatch(i));
  }

  // repeated string eventAnchor = 4;
  total_size += 1 * this->eventanchor_size();
  for (int i = 0; i < this->eventanchor_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->eventanchor(i));
  }

  // repeated .learnit.SlotFiller slot = 6;
  total_size += 1 * this->slot_size();
  for (int i = 0; i < this->slot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slot(i));
  }

  // repeated .learnit.Prop prop = 7;
  total_size += 1 * this->prop_size();
  for (int i = 0; i < this->prop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeedInstanceMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeedInstanceMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeedInstanceMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeedInstanceMatch::MergeFrom(const SeedInstanceMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  relationmatch_.MergeFrom(from.relationmatch_);
  eventmatch_.MergeFrom(from.eventmatch_);
  eventanchor_.MergeFrom(from.eventanchor_);
  slot_.MergeFrom(from.slot_);
  prop_.MergeFrom(from.prop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeedInstanceMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeedInstanceMatch::CopyFrom(const SeedInstanceMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeedInstanceMatch::IsInitialized() const {

  return true;
}

void SeedInstanceMatch::Swap(SeedInstanceMatch* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    relationmatch_.Swap(&other->relationmatch_);
    eventmatch_.Swap(&other->eventmatch_);
    eventanchor_.Swap(&other->eventanchor_);
    std::swap(score_, other->score_);
    slot_.Swap(&other->slot_);
    prop_.Swap(&other->prop_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeedInstanceMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeedInstanceMatch_descriptor_;
  metadata.reflection = SeedInstanceMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TokenAlignment::kSourceIndexFieldNumber;
const int TokenAlignment::kTargetIndexFieldNumber;
#endif  // !_MSC_VER

TokenAlignment::TokenAlignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TokenAlignment::InitAsDefaultInstance() {
}

TokenAlignment::TokenAlignment(const TokenAlignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TokenAlignment::SharedCtor() {
  _cached_size_ = 0;
  sourceindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenAlignment::~TokenAlignment() {
  SharedDtor();
}

void TokenAlignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TokenAlignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenAlignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenAlignment_descriptor_;
}

const TokenAlignment& TokenAlignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

TokenAlignment* TokenAlignment::default_instance_ = NULL;

TokenAlignment* TokenAlignment::New() const {
  return new TokenAlignment;
}

void TokenAlignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourceindex_ = 0;
  }
  targetindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenAlignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sourceIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceindex_)));
          set_has_sourceindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetIndex;
        break;
      }

      // repeated int32 targetIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_targetindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_targetindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetIndex;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TokenAlignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sourceIndex = 1;
  if (has_sourceindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sourceindex(), output);
  }

  // repeated int32 targetIndex = 2;
  for (int i = 0; i < this->targetindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->targetindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TokenAlignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sourceIndex = 1;
  if (has_sourceindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sourceindex(), target);
  }

  // repeated int32 targetIndex = 2;
  for (int i = 0; i < this->targetindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->targetindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TokenAlignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sourceIndex = 1;
    if (has_sourceindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceindex());
    }

  }
  // repeated int32 targetIndex = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->targetindex(i));
    }
    total_size += 1 * this->targetindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenAlignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenAlignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenAlignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenAlignment::MergeFrom(const TokenAlignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetindex_.MergeFrom(from.targetindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceindex()) {
      set_sourceindex(from.sourceindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenAlignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenAlignment::CopyFrom(const TokenAlignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenAlignment::IsInitialized() const {

  return true;
}

void TokenAlignment::Swap(TokenAlignment* other) {
  if (other != this) {
    std::swap(sourceindex_, other->sourceindex_);
    targetindex_.Swap(&other->targetindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenAlignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenAlignment_descriptor_;
  metadata.reflection = TokenAlignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MentionAlignment::kSourceMentionFieldNumber;
const int MentionAlignment::kTargetMentionFieldNumber;
#endif  // !_MSC_VER

MentionAlignment::MentionAlignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MentionAlignment::InitAsDefaultInstance() {
  sourcemention_ = const_cast< ::learnit::NameSpan*>(&::learnit::NameSpan::default_instance());
  targetmention_ = const_cast< ::learnit::NameSpan*>(&::learnit::NameSpan::default_instance());
}

MentionAlignment::MentionAlignment(const MentionAlignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MentionAlignment::SharedCtor() {
  _cached_size_ = 0;
  sourcemention_ = NULL;
  targetmention_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MentionAlignment::~MentionAlignment() {
  SharedDtor();
}

void MentionAlignment::SharedDtor() {
  if (this != default_instance_) {
    delete sourcemention_;
    delete targetmention_;
  }
}

void MentionAlignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MentionAlignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MentionAlignment_descriptor_;
}

const MentionAlignment& MentionAlignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

MentionAlignment* MentionAlignment::default_instance_ = NULL;

MentionAlignment* MentionAlignment::New() const {
  return new MentionAlignment;
}

void MentionAlignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sourcemention()) {
      if (sourcemention_ != NULL) sourcemention_->::learnit::NameSpan::Clear();
    }
    if (has_targetmention()) {
      if (targetmention_ != NULL) targetmention_->::learnit::NameSpan::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MentionAlignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .learnit.NameSpan sourceMention = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sourcemention()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetMention;
        break;
      }

      // optional .learnit.NameSpan targetMention = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetMention:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetmention()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MentionAlignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .learnit.NameSpan sourceMention = 1;
  if (has_sourcemention()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sourcemention(), output);
  }

  // optional .learnit.NameSpan targetMention = 2;
  if (has_targetmention()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetmention(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MentionAlignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .learnit.NameSpan sourceMention = 1;
  if (has_sourcemention()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sourcemention(), target);
  }

  // optional .learnit.NameSpan targetMention = 2;
  if (has_targetmention()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetmention(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MentionAlignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .learnit.NameSpan sourceMention = 1;
    if (has_sourcemention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourcemention());
    }

    // optional .learnit.NameSpan targetMention = 2;
    if (has_targetmention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetmention());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MentionAlignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MentionAlignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MentionAlignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MentionAlignment::MergeFrom(const MentionAlignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcemention()) {
      mutable_sourcemention()->::learnit::NameSpan::MergeFrom(from.sourcemention());
    }
    if (from.has_targetmention()) {
      mutable_targetmention()->::learnit::NameSpan::MergeFrom(from.targetmention());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MentionAlignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MentionAlignment::CopyFrom(const MentionAlignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MentionAlignment::IsInitialized() const {

  return true;
}

void MentionAlignment::Swap(MentionAlignment* other) {
  if (other != this) {
    std::swap(sourcemention_, other->sourcemention_);
    std::swap(targetmention_, other->targetmention_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MentionAlignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MentionAlignment_descriptor_;
  metadata.reflection = MentionAlignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SentenceAlignment::kSourceFieldNumber;
const int SentenceAlignment::kTargetFieldNumber;
const int SentenceAlignment::kTokenAlignmentFieldNumber;
const int SentenceAlignment::kMentionAlignmentFieldNumber;
#endif  // !_MSC_VER

SentenceAlignment::SentenceAlignment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SentenceAlignment::InitAsDefaultInstance() {
}

SentenceAlignment::SentenceAlignment(const SentenceAlignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SentenceAlignment::SharedCtor() {
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SentenceAlignment::~SentenceAlignment() {
  SharedDtor();
}

void SentenceAlignment::SharedDtor() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void SentenceAlignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SentenceAlignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SentenceAlignment_descriptor_;
}

const SentenceAlignment& SentenceAlignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

SentenceAlignment* SentenceAlignment::default_instance_ = NULL;

SentenceAlignment* SentenceAlignment::New() const {
  return new SentenceAlignment;
}

void SentenceAlignment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
  }
  tokenalignment_.Clear();
  mentionalignment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SentenceAlignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_target;
        break;
      }

      // optional string target = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tokenAlignment;
        break;
      }

      // repeated .learnit.TokenAlignment tokenAlignment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tokenAlignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokenalignment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tokenAlignment;
        if (input->ExpectTag(50)) goto parse_mentionAlignment;
        break;
      }

      // repeated .learnit.MentionAlignment mentionAlignment = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mentionAlignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mentionalignment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mentionAlignment;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SentenceAlignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->source(), output);
  }

  // optional string target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->target(), output);
  }

  // repeated .learnit.TokenAlignment tokenAlignment = 5;
  for (int i = 0; i < this->tokenalignment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tokenalignment(i), output);
  }

  // repeated .learnit.MentionAlignment mentionAlignment = 6;
  for (int i = 0; i < this->mentionalignment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mentionalignment(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SentenceAlignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source(), target);
  }

  // optional string target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->target(), target);
  }

  // repeated .learnit.TokenAlignment tokenAlignment = 5;
  for (int i = 0; i < this->tokenalignment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tokenalignment(i), target);
  }

  // repeated .learnit.MentionAlignment mentionAlignment = 6;
  for (int i = 0; i < this->mentionalignment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mentionalignment(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SentenceAlignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string source = 3;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

  }
  // repeated .learnit.TokenAlignment tokenAlignment = 5;
  total_size += 1 * this->tokenalignment_size();
  for (int i = 0; i < this->tokenalignment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tokenalignment(i));
  }

  // repeated .learnit.MentionAlignment mentionAlignment = 6;
  total_size += 1 * this->mentionalignment_size();
  for (int i = 0; i < this->mentionalignment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mentionalignment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SentenceAlignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SentenceAlignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SentenceAlignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SentenceAlignment::MergeFrom(const SentenceAlignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  tokenalignment_.MergeFrom(from.tokenalignment_);
  mentionalignment_.MergeFrom(from.mentionalignment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SentenceAlignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SentenceAlignment::CopyFrom(const SentenceAlignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentenceAlignment::IsInitialized() const {

  return true;
}

void SentenceAlignment::Swap(SentenceAlignment* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(target_, other->target_);
    tokenalignment_.Swap(&other->tokenalignment_);
    mentionalignment_.Swap(&other->mentionalignment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SentenceAlignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SentenceAlignment_descriptor_;
  metadata.reflection = SentenceAlignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sentence::kSentenceTheoryFieldNumber;
const int Sentence::kSentenceAlignmentFieldNumber;
const int Sentence::kPatternMatchFieldNumber;
const int Sentence::kSeedInstanceMatchFieldNumber;
#endif  // !_MSC_VER

Sentence::Sentence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sentence::InitAsDefaultInstance() {
}

Sentence::Sentence(const Sentence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sentence::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sentence::~Sentence() {
  SharedDtor();
}

void Sentence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sentence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sentence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sentence_descriptor_;
}

const Sentence& Sentence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

Sentence* Sentence::default_instance_ = NULL;

Sentence* Sentence::New() const {
  return new Sentence;
}

void Sentence::Clear() {
  sentencetheory_.Clear();
  sentencealignment_.Clear();
  patternmatch_.Clear();
  seedinstancematch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sentence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .learnit.SentenceTheory sentenceTheory = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sentenceTheory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentencetheory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sentenceTheory;
        if (input->ExpectTag(18)) goto parse_sentenceAlignment;
        break;
      }

      // repeated .learnit.SentenceAlignment sentenceAlignment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sentenceAlignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentencealignment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sentenceAlignment;
        if (input->ExpectTag(26)) goto parse_patternMatch;
        break;
      }

      // repeated .learnit.PatternMatch patternMatch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patternMatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patternmatch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_patternMatch;
        if (input->ExpectTag(34)) goto parse_seedInstanceMatch;
        break;
      }

      // repeated .learnit.SeedInstanceMatch seedInstanceMatch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seedInstanceMatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seedinstancematch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seedInstanceMatch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sentence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .learnit.SentenceTheory sentenceTheory = 1;
  for (int i = 0; i < this->sentencetheory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sentencetheory(i), output);
  }

  // repeated .learnit.SentenceAlignment sentenceAlignment = 2;
  for (int i = 0; i < this->sentencealignment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sentencealignment(i), output);
  }

  // repeated .learnit.PatternMatch patternMatch = 3;
  for (int i = 0; i < this->patternmatch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->patternmatch(i), output);
  }

  // repeated .learnit.SeedInstanceMatch seedInstanceMatch = 4;
  for (int i = 0; i < this->seedinstancematch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->seedinstancematch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sentence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .learnit.SentenceTheory sentenceTheory = 1;
  for (int i = 0; i < this->sentencetheory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sentencetheory(i), target);
  }

  // repeated .learnit.SentenceAlignment sentenceAlignment = 2;
  for (int i = 0; i < this->sentencealignment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sentencealignment(i), target);
  }

  // repeated .learnit.PatternMatch patternMatch = 3;
  for (int i = 0; i < this->patternmatch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->patternmatch(i), target);
  }

  // repeated .learnit.SeedInstanceMatch seedInstanceMatch = 4;
  for (int i = 0; i < this->seedinstancematch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->seedinstancematch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sentence::ByteSize() const {
  int total_size = 0;

  // repeated .learnit.SentenceTheory sentenceTheory = 1;
  total_size += 1 * this->sentencetheory_size();
  for (int i = 0; i < this->sentencetheory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sentencetheory(i));
  }

  // repeated .learnit.SentenceAlignment sentenceAlignment = 2;
  total_size += 1 * this->sentencealignment_size();
  for (int i = 0; i < this->sentencealignment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sentencealignment(i));
  }

  // repeated .learnit.PatternMatch patternMatch = 3;
  total_size += 1 * this->patternmatch_size();
  for (int i = 0; i < this->patternmatch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patternmatch(i));
  }

  // repeated .learnit.SeedInstanceMatch seedInstanceMatch = 4;
  total_size += 1 * this->seedinstancematch_size();
  for (int i = 0; i < this->seedinstancematch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seedinstancematch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sentence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sentence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sentence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sentence::MergeFrom(const Sentence& from) {
  GOOGLE_CHECK_NE(&from, this);
  sentencetheory_.MergeFrom(from.sentencetheory_);
  sentencealignment_.MergeFrom(from.sentencealignment_);
  patternmatch_.MergeFrom(from.patternmatch_);
  seedinstancematch_.MergeFrom(from.seedinstancematch_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sentence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sentence::CopyFrom(const Sentence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sentence::IsInitialized() const {

  return true;
}

void Sentence::Swap(Sentence* other) {
  if (other != this) {
    sentencetheory_.Swap(&other->sentencetheory_);
    sentencealignment_.Swap(&other->sentencealignment_);
    patternmatch_.Swap(&other->patternmatch_);
    seedinstancematch_.Swap(&other->seedinstancematch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sentence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sentence_descriptor_;
  metadata.reflection = Sentence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Instance::kSentenceFieldNumber;
#endif  // !_MSC_VER

Instance::Instance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Instance::InitAsDefaultInstance() {
}

Instance::Instance(const Instance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Instance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instance::~Instance() {
  SharedDtor();
}

void Instance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instance_descriptor_;
}

const Instance& Instance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_instances_2eproto();
  return *default_instance_;
}

Instance* Instance::default_instance_ = NULL;

Instance* Instance::New() const {
  return new Instance;
}

void Instance::Clear() {
  sentence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .learnit.Sentence sentence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sentence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sentence;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .learnit.Sentence sentence = 1;
  for (int i = 0; i < this->sentence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sentence(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Instance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .learnit.Sentence sentence = 1;
  for (int i = 0; i < this->sentence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sentence(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Instance::ByteSize() const {
  int total_size = 0;

  // repeated .learnit.Sentence sentence = 1;
  total_size += 1 * this->sentence_size();
  for (int i = 0; i < this->sentence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sentence(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instance::MergeFrom(const Instance& from) {
  GOOGLE_CHECK_NE(&from, this);
  sentence_.MergeFrom(from.sentence_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instance::CopyFrom(const Instance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {

  return true;
}

void Instance::Swap(Instance* other) {
  if (other != this) {
    sentence_.Swap(&other->sentence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instance_descriptor_;
  metadata.reflection = Instance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace learnit

// @@protoc_insertion_point(global_scope)
