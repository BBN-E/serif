// Copyright 2011 by BBN Technologies Corp.
// All Rights Reserved.

#ifndef VALUE_MENTION_PFEATURE_H
#define VALUE_MENTION_PFEATURE_H

#include "Generic/patterns/features/PatternFeature.h"
#include "Generic/theories/ValueMention.h"
#include "Generic/theories/SynNode.h"
#include "Generic/common/Symbol.h"
#include "Generic/common/BoostUtil.h"
#include <boost/shared_ptr.hpp>

/** A feature used to store information about a successful ValueMentionPattern match.
  * In addition to the basic PatternFeature information, each ValueMentionPFeature 
  * defines:
  *
  *   - valueMention: A pointer to the valueMention that was matched (not owned by this
  *     ValueMentionPFeature).
  *
  *   - matchSym: A symbol containing the name of an ACE type that matched an
  *     "acetype" constraint; *or* the name of an entity label that matched an
  *     "entitylabel" constraint; *or* the name of an ACE subtype that matched
  *     an "acesubtype" constraint.  If none of these constraints was used, then
  *     the matchSym will be the empty symbol.
  */
class ValueMentionPFeature: public PatternFeature {
private:
	/** Create a new ValueMentionPFeature.  
	  * is_focus will be true if it is explicitly set to true, *or* if the given pattern
	  * is a FocusValueMentionPattern. */
	ValueMentionPFeature(Pattern_ptr pattern, const ValueMention *valueMention, Symbol matchSym, 
		const LanguageVariant_ptr& languageVariant, float confidence=1.0f);
	BOOST_MAKE_SHARED_5ARG_CONSTRUCTOR(ValueMentionPFeature, Pattern_ptr, const ValueMention*, Symbol, 
		const LanguageVariant_ptr&, float);
	BOOST_MAKE_SHARED_4ARG_CONSTRUCTOR(ValueMentionPFeature, Pattern_ptr, const ValueMention*, Symbol,
		const LanguageVariant_ptr&);
		
	ValueMentionPFeature(Pattern_ptr pattern, const ValueMention *valueMention, Symbol matchSym, float confidence=1.0f);
	BOOST_MAKE_SHARED_4ARG_CONSTRUCTOR(ValueMentionPFeature, Pattern_ptr, const ValueMention*, Symbol, float);
	BOOST_MAKE_SHARED_3ARG_CONSTRUCTOR(ValueMentionPFeature, Pattern_ptr, const ValueMention*, Symbol);
public:

	/** Return the valueMention that was matched to create this feature. */
	const ValueMention *getValueMention() { return _valueMention; }

	/** Return true if this feature was generated by a pattern match that
	  * required the given entity label.  (Note: this will return false if
	  * the pattern also required an acetype, and that matched instead.) */
	bool matchesLabel(Symbol label) { return _matchSym == label; }

	// Overridden virtual methods.
	virtual void setCoverage(const DocTheory * docTheory) {/* nothing to do*/}
	virtual void setCoverage(const PatternMatcher_ptr patternMatcher) {/* nothing to do*/}
	virtual int getSentenceNumber() const { return _valueMention->getSentenceNumber(); }
	virtual int getStartToken() const { return _valueMention->getStartToken(); }
	virtual int getEndToken() const { return _valueMention->getEndToken(); }
	bool equals(PatternFeature_ptr other) {
		boost::shared_ptr<ValueMentionPFeature> f = boost::dynamic_pointer_cast<ValueMentionPFeature>(other);
		return f && (f->getValueMention() == getValueMention());
	}
	virtual void printFeatureFocus(const PatternMatcher_ptr docInfo, UTF8OutputStream &out) const;
	virtual void saveXML(SerifXML::XMLElement elem, const SerifXML::XMLIdMap* idMap) const;
	ValueMentionPFeature(SerifXML::XMLElement elem, const SerifXML::XMLIdMap* idMap);

private:
	const ValueMention *_valueMention;
	Symbol _matchSym; // contains ace type name *or* entity label name *or* ace subtype name (or empty)
	bool _is_focus;	
};

typedef boost::shared_ptr<ValueMentionPFeature> ValueMentionPFeature_ptr;

#endif
