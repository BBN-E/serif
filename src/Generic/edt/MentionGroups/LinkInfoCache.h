// Copyright (c) 2012 by Raytheon BBN Technologies Corp.
// All Rights Reserved.

#ifndef LINK_INFO_CACHE_H
#define LINK_INFO_CACHE_H

#include "Generic/common/AttributeValuePairExtractor.h"
#include <boost/shared_ptr.hpp>
#include <boost/scoped_ptr.hpp>
#include <map>
#include <vector>

// Forward declarations.
class DocTheory;
class Mention;
class MentionGroup;
class MentionGroupConfiguration;

class AttributeValuePairBase;
typedef boost::shared_ptr<AttributeValuePairBase> AttributeValuePair_ptr;
typedef Symbol::HashMap<std::vector<AttributeValuePair_ptr> > AttributeValuePairMap;
typedef std::pair<const Mention*, const Mention*> MentionPair;

/**
  *  Pre-computes and caches features used by the co-reference resolution 
  *  process and provides storage for shared data resources.
  */
class LinkInfoCache {
private:
	struct HashKey {
        size_t operator()(const Symbol key) const {
			return key.hash_code();
        }
    };
	struct EqualKey {
        bool operator()(const Symbol key1, const Symbol key2) const {
            return (key1 == key2);
        }
    };

	typedef serif::hash_map<Symbol, Symbol, HashKey, EqualKey> HashTable;

	typedef std::map<const Mention*, AttributeValuePairMap > MentionFeatureTable;
	typedef std::map<MentionPair, AttributeValuePairMap > MentionPairFeatureTable;

	typedef Symbol::HashMap<std::vector<const Mention*> > SymbolToMentionsMap;
	typedef Symbol::HashMap<SymbolToMentionsMap > FeatureToMentionsTable;

public:
	LinkInfoCache(MentionGroupConfiguration *config);
	~LinkInfoCache();

	void setDocTheory(const DocTheory *docTheory);
	const DocTheory* getDocTheory() const { return _docTheory; }

//=============================== Feature Accessors ==================================
	/** Return a vector of all features of mention with the given featureName (key) generated by the named extractor. */
	std::vector<AttributeValuePair_ptr> getMentionFeaturesByName(const Mention *mention, Symbol extractorName, Symbol featureName) const;
	std::vector<AttributeValuePair_ptr> getMentionFeaturesByName(const MentionGroup& group, Symbol extractorName, Symbol featureName) const;

	/** Return a vector of all features of the ment1, ment2 pair with the given featureName (key) generated by the named extractor. */
	std::vector<AttributeValuePair_ptr> getMentionPairFeaturesByName(const Mention *ment1, const Mention *ment2, Symbol extractorName, Symbol featureName);

	/** Return a vector of all mentions with the given feature key-value pair (key is 'extractorName:featureName'). */
	std::vector<const Mention*> getMentionsByFeatureValue(Symbol extractorName, Symbol featureName, Symbol featureValue) const;

//=========================== Shared Resource Accessors ================================
	Symbol lookupAlternateSpelling(Symbol key) const  { return doHashTableLookup(_alternateSpellings.get(), key); }

//=============================== Feature Population ===================================
	/** Pre-compute and store all Mention features for _docTheory. */ 
	void populateMentionFeatureTable();
	
private:
//======================== Member Variables ============================
	// pointer to the current DocTheory - not owned by cache
	const DocTheory *_docTheory;

	// cached features of current document
	MentionFeatureTable _mentionFeatureTable;
	MentionPairFeatureTable _mentionPairFeatureTable;
	//map<Mention*, Profile *> ProfileTable;
	FeatureToMentionsTable _featureToMentionsTable;

	// resources shared across extractors, mergers and constraints
	boost::scoped_ptr<HashTable> _alternateSpellings; 

	std::vector<AttributeValuePairExtractor<Mention>::ptr_type> _extractors;
	std::vector<AttributeValuePairExtractor<MentionPair>::ptr_type> _pairExtractors;

//======================== Helper Methods ==============================
	void loadAlternateSpellings(std::string filepath);

	Symbol doHashTableLookup(HashTable *table, Symbol key) const;

	void populateMentionPairFeatureTable(MentionPair& pair, AttributeValuePairMap& featureMap);

	void clearMentionFeatureTable();
	void clearMentionPairFeatureTable();
	void clearFeatureToMentionsTable();

};

#endif
